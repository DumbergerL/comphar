#!/usr/bin/env php
<?php

namespace mpyw\comphar;
use Ulrichsg\Getopt\Getopt;
use Ulrichsg\Getopt\Option;

call_user_func(function () {

if (PHP_SAPI !== 'cli') {
    header('Content-Type: text/plain; charset=utf-8', true, 500);
    echo 'You have to execute via CLI' . PHP_EOL;
    exit(1);
}
if (ini_get('phar.readonly') || ini_get('phar.require_hash')) {
    fwrite(STDERR, 'You have to disable "phar.readonly" and "phar.require_hash"' . PHP_EOL);
    exit(1);
}

$loader = __DIR__ . '/../../../autoload.php';
if (!is_file($loader)) {
    fwrite(STDERR, 'Do not call this script directly.' . PHP_EOL);
    exit(1);
}
require $loader;

$getopt = new GetOpt([
    (new Option('o', 'out', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('Output archive name. Default value is "vendor.phar".')
        ->setDefaultValue('vendor.phar'),
    (new Option('d', 'dir', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('Project root directory. Default value is current directory.')
        ->setDefaultValue(getcwd())
        ->setValidation(function ($path) {
            return
                is_file("$path/composer.json") &&
                is_dir("$path/vendor") &&
                is_file("$path/vendor/autoload.php")
            ;
        }),
    (new Option('h', 'help'))
        ->setDescription('Show help.'),
]);
$getopt->setBanner("Usage: $argv[0] [options]\n");

try {
    $getopt->parse();
    if ($getopt['help'] !== null) {
        echo $getopt->getHelpText();
        exit(0);
    }
    $out = $getopt['out'];
    $dir = $getopt['dir'];
} catch (\UnexpectedValueException $e) {
    echo "Error: {$e->getMessage()}" . PHP_EOL;
    echo $getopt->getHelpText();
    exit(1);
}

if (file_exists($out)) {
    unlink($out);
}

$phar = new \Phar($out, 0, basename($out));
$phar->setStub("<?php
/*
 * Generated by comphar
 */
 call_user_func(function () {
    require 'phar://' . __FILE__ . '/vendor/autoload.php';
});
__HALT_COMPILER(); ?>");
$phar->buildFromDirectory($dir);

});
