#!/usr/bin/env php
<?php

namespace mpyw\comphar;

if (PHP_SAPI !== 'cli') {
    header('Content-Type: text/plain; charset=utf-8', true, 500);
    echo 'You have to execute via CLI' . PHP_EOL;
    exit(1);
}
if (ini_get('phar.readonly') || ini_get('phar.require_hash')) {
    fwrite(STDERR, 'You have to disable "phar.readonly" and "phar.require_hash"' . PHP_EOL);
    exit(1);
}

require __DIR__ . '/../../../autoload.php';
use Ulrichsg\Getopt\Getopt;
use Ulrichsg\Getopt\Option;

$getopt = new GetOpt([
    (new Option('o', 'out', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('Output archive name. Default value is "vendor.phar".')
        ->setDefaultValue('vendor.phar'),
    (new Option('d', 'dir', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('Project root directory. Default value is current directory.')
        ->setDefaultValue(getcwd())
        ->setValidation(function ($path) {
            return
                is_file("$path/composer.json") &&
                is_dir("$path/vendor") &&
                is_file("$path/vendor/autoload.php")
            ;
        }),
    (new Option('x', 'exclude-self'))
        ->setDescription('Exclude self project. (Included by default)')
        ->setDefaultValue('vendor.phar'),
    (new Option('h', 'help'))
        ->setDescription('Show help.'),
]);

try {
    $getopt->parse();
    if ($getopt['help'] !== null) {
        echo $getopt->getHelpText();
        exit(0);
    }
    $out = $getopt['out'];
    $dir = $getopt['dir'];
    $exclude = $getopt['exclude-self'];
} catch (\UnexpectedValueException $e) {
    echo "Error: {$e->getMessage()}" . PHP_EOL;
    echo $getopt->getHelpText();
    exit(1);
}

if (file_exists($out)) {
    unlink($out);
}

$phar = new \Phar($out, 0, basename($out));

if ($exclude):

$phar->setStub("<?php
/*
 * Generated by comphar
 */
 call_user_func(function () {
    require 'phar://' . __FILE__ . '/autoload.php';
});
__HALT_COMPILER(); ?>");
$phar->buildFromDirectory("$dir/vendor");

else:

$phar->setStub("<?php
/*
 * Generated by comphar
 */
 call_user_func(function () {
    \$loader = require 'phar://' . __FILE__ . '/vendor/autoload.php';
    \$json = json_decode(file_get_contents('phar://' . __FILE__ . '/composer.json'));
    if (!empty(\$json->autoload->{'psr-4'})) {
        foreach (\$json->autoload->{'psr-4'} as \$key => \$value) {
            \$loader->add(\$key, 'phar://' . __FILE__ . '/' . \$value);
        }
    }
    if (!empty(\$json->autoload->{'psr-0'})) {
        foreach (\$json->autoload->{'psr-0'} as \$key => \$value) {
            \$loader->add(\$key, 'phar://' . __FILE__ . '/' . \$value);
        }
    }
    if (!empty(\$json->autoload->classmap)) {
        foreach (\$json->autoload->classmap as &\$value) {
            \$value = 'phar://' . __FILE__ . '/' . \$value;
        }
        unset(\$value);
        \$loader->addClassMap(\$json->autoload->classmap);
    }
    if (!empty(\$json->autoload->files)) {
        foreach (\$json->autoload->files as \$value) {
            require_once 'phar://' . __FILE__ . '/' . \$value;
        }
    }
});
__HALT_COMPILER(); ?>");
$phar->buildFromDirectory($dir);

endif;
